# -*- coding: utf-8 -*-
"""Comparative Analysis of Algos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aOwRDtVjxrwWvwoV-DbodO3KI93zuGiN
"""

import matplotlib.pyplot as plt
import numpy as np

# Data from the comparative analysis
algorithms = ['Gibbs Sampling', 'RMS', 'GMS', 'CRA', 'Genetic Algo']
hamming_distance = [8.40, 8.40, 7.58, 10.14, 8.80]
accuracy = [44.00, 38.60, 34.00, 32.40, 33.33]
recall = [80.00, 38.60, 34.00, 32.40, 8.00]

# Create subplots
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(18, 6))
fig.suptitle('Comparative Analysis of Motif-Finding Algorithms', fontsize=16)

# Plot 1: Average Hamming Distance
ax1.bar(algorithms, hamming_distance, color='skyblue')
ax1.set_title('Average Hamming Distance')
ax1.set_ylabel('Distance')
ax1.tick_params(axis='x', rotation=45)

# Plot 2: Average Accuracy
ax2.bar(algorithms, accuracy, color='lightgreen')
ax2.set_title('Average Accuracy')
ax2.set_ylabel('Percentage (%)')
ax2.tick_params(axis='x', rotation=45)

# Plot 3: Average Recall
ax3.bar(algorithms, recall, color='salmon')
ax3.set_title('Average Recall')
ax3.set_ylabel('Percentage (%)')
ax3.tick_params(axis='x', rotation=45)

# Adjust layout
plt.tight_layout()
plt.show()

# Alternatively, a grouped bar plot for accuracy and recall
x = np.arange(len(algorithms))  # the label locations
width = 0.35  # the width of the bars

fig, ax = plt.subplots(figsize=(10, 6))
rects1 = ax.bar(x - width/2, accuracy, width, label='Accuracy', color='lightgreen')
rects2 = ax.bar(x + width/2, recall, width, label='Recall', color='salmon')

ax.set_title('Accuracy and Recall Comparison of Motif-Finding Algorithms')
ax.set_ylabel('Percentage (%)')
ax.set_xticks(x)
ax.set_xticklabels(algorithms)
ax.legend()
ax.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()